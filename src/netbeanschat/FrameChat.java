package netbeanschat;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author danbo
 */
public class FrameChat extends javax.swing.JFrame implements Runnable{

    Socket client;
    ServerSocket server;
    BufferedReader serverReader, clietnReader;
    BufferedWriter serverWriter, clientWriter;
    DefaultListModel dlm = new DefaultListModel();
    
    public FrameChat() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jCBServer = new javax.swing.JComboBox<>();
        jBabout = new javax.swing.JButton();
        jTusername = new javax.swing.JTextField();
        jTchat = new javax.swing.JTextField();
        jBsend = new javax.swing.JButton();
        jBon = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        Lchat = new javax.swing.JList<>();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jCBServer.setMaximumRowCount(2);
        jCBServer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "SERVER", "CLIENT" }));
        jCBServer.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jCBServerItemStateChanged(evt);
            }
        });
        jCBServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBServerActionPerformed(evt);
            }
        });

        jBabout.setText("ABOUT");

        jBsend.setText("SEND");
        jBsend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsendActionPerformed(evt);
            }
        });

        jBon.setText("ON");
        jBon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBonActionPerformed(evt);
            }
        });

        Lchat.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane2.setViewportView(Lchat);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTusername, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jTchat, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBsend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jCBServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBon, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBabout)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCBServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBabout)
                    .addComponent(jBon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTusername, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(52, 52, 52)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(147, 147, 147)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTchat, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBsend, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBonActionPerformed
        // TODO add your handling code here:
       
        if (jBon.getText().equalsIgnoreCase("CONNECT")) {
            jBon.setText("DISCONNECT");
            clientConnection();
            Thread thread = new Thread(this);
            thread.start();
        } else if (jCBServer.getSelectedItem().equals("SERVER")){
            jBon.setText("OFF");
            readConnection();
            Thread thread = new Thread(this);
            thread.start();
        }
        
    }//GEN-LAST:event_jBonActionPerformed

    private void jBsendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsendActionPerformed
        // TODO add your handling code here:

        try {
            serverWriter.write(jTusername.getText() + " : " + jTchat.getText());
            serverWriter.newLine();
            serverWriter.flush();
        } catch (Exception e) {
            Logger.getLogger(FrameChat.class.getName()).log(Level.SEVERE, null, e);
        }
     
       dlm.addElement("Me : " + jTchat.getText());
       Lchat.setModel(dlm);
       
       
       jTchat.setText("");
        
    }//GEN-LAST:event_jBsendActionPerformed

    private void jCBServerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jCBServerItemStateChanged
       // TODO add your handling code here:
       
       if(jCBServer.getSelectedItem().equals("SERVER")) {
           jBon.setText("ON");
           jTusername.setText("SERVER");
       } else {
           jBon.setText("CONNECT");
           jTusername.setText("CLIENT");
       }
       
       
    }//GEN-LAST:event_jCBServerItemStateChanged

    private void jCBServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBServerActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCBServerActionPerformed

    private void clientConnection() {
        
        try {
            
            String ip = JOptionPane.showInputDialog("Masukkan Ip");
            client = new Socket(ip, 2000);
            jCBServer.setEnabled(false);
            serverReader = new BufferedReader(new InputStreamReader(client.getInputStream()));
            serverWriter = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));
            jBon.setText("DISCONNECT");
            
        } catch (UnknownHostException e) {
            System.out.println("Accept Failed");
            System.exit(-1);
        } catch (IOException e) {
            Logger.getLogger(FrameChat.class.getName()).log(Level.SEVERE, null, e);
        }
    }
    
    private void readConnection() {
        try {
            
            try {
                try {
                    
                    server = new ServerSocket(2000);
                    this.setTitle("Please wait ... ");
                    
                } catch (Exception e) {
                    System.out.println("Could not listen");
                    System.exit(-1);
                }
                
                jTusername.setText("SERVER");
                jCBServer.setEnabled(false);
                client = server.accept();
                this.setTitle("CONNECTED " + client.getInetAddress());
               
            } catch (Exception e) {
                System.out.println("Accept Failed");
                System.exit(-1);
            }
            
            serverReader = new BufferedReader(new InputStreamReader(client.getInputStream()));
            serverWriter = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));
            
        } catch (Exception e) {
           
            System.out.println("Read Failed");
            System.exit(-1);
        }
    }
    
    
   private void disconnectedByClient() {
       
       try {
           client.close();
           serverReader.close();
           serverWriter.close();
           jCBServer.setEnabled(true);
           jBon.setText("CONNECT");
           
       } catch (Exception e) {
           Logger.getLogger(FrameChat.class.getName()).log(Level.SEVERE, null, e);
       }
       
   }
   
   private void stoppedByServer() {
       
       try {
           serverReader.close();
           serverWriter.close();
           jCBServer.setEnabled(true);
           jBon.setText("DISCONNECT");
           
       } catch (Exception e) {
           Logger.getLogger(FrameChat.class.getName()).log(Level.SEVERE, null, e);
       }
       
   }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameChat.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameChat().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> Lchat;
    private javax.swing.JButton jBabout;
    private javax.swing.JButton jBon;
    private javax.swing.JButton jBsend;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jCBServer;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jTchat;
    private javax.swing.JTextField jTusername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
    
        while (true) {            
            try {
         
                dlm.addElement(serverReader.readLine());
                Lchat.setModel(dlm);
                
            } catch (IOException ex) {
                Logger.getLogger(FrameChat.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
    }
}
